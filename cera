´<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CeraHub Key Generator</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #6e8efb, #a777e3);
            color: #333;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }
        
        .container {
            width: 100%;
            max-width: 500px;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
            overflow: hidden;
        }
        
        .header {
            background: #6c63ff;
            color: white;
            padding: 25px;
            text-align: center;
        }
        
        .header h1 {
            font-weight: 600;
            font-size: 28px;
            margin-bottom: 5px;
        }
        
        .header p {
            opacity: 0.9;
        }
        
        .content {
            padding: 30px;
        }
        
        .key-display {
            background: #f5f7ff;
            border-radius: 12px;
            padding: 25px;
            text-align: center;
            margin-bottom: 25px;
            border: 2px dashed #6c63ff;
        }
        
        .key {
            font-family: 'Courier New', monospace;
            font-size: 28px;
            font-weight: 700;
            color: #6c63ff;
            letter-spacing: 1.5px;
            margin: 15px 0;
        }
        
        .countdown {
            text-align: center;
            font-size: 18px;
            color: #666;
            margin-bottom: 30px;
        }
        
        .countdown-value {
            font-weight: 700;
            color: #6c63ff;
        }
        
        .info-box {
            background: #eef1ff;
            border-radius: 12px;
            padding: 20px;
            margin-top: 20px;
            font-size: 14px;
            color: #555;
        }
        
        .info-box h3 {
            color: #6c63ff;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .buttons {
            display: flex;
            gap: 15px;
            margin-top: 25px;
        }
        
        button {
            flex: 1;
            padding: 15px;
            border: none;
            border-radius: 10px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 8px;
        }
        
        .copy-btn {
            background: #6c63ff;
            color: white;
        }
        
        .copy-btn:hover {
            background: #5a52d5;
        }
        
        .history-btn {
            background: #f5f7ff;
            color: #6c63ff;
            border: 1px solid #6c63ff;
        }
        
        .history-btn:hover {
            background: #eef1ff;
        }
        
        .footer {
            text-align: center;
            padding: 20px;
            color: #777;
            font-size: 14px;
            border-top: 1px solid #eee;
        }
        
        @media (max-width: 600px) {
            .header h1 {
                font-size: 24px;
            }
            
            .key {
                font-size: 22px;
            }
            
            .buttons {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1><i class="fas fa-key"></i> CeraHub Key Generator</h1>
            <p>Your secure key updates every 12 hours</p>
        </div>
        
        <div class="content">
            <div class="key-display">
                <p>Current Key</p>
                <div class="key" id="currentKey">cerahub###</div>
                <p>Valid for the next <span id="countdown">12:00:00</span></p>
            </div>
            
            <div class="countdown">
                Next update in: <span class="countdown-value" id="timer">11:59:35</span>
            </div>
            
            <div class="info-box">
                <h3><i class="fas fa-info-circle"></i> How it works</h3>
                <p>This system generates a new secure key every 12 hours. Each key starts with "cerahub" followed by a unique 3-digit code. The key changes at 12:00 AM/PM UTC.</p>
            </div>
            
            <div class="buttons">
                <button class="copy-btn" onclick="copyKey()">
                    <i class="fas fa-copy"></i> Copy Key
                </button>
                <button class="history-btn" onclick="showHistory()">
                    <i class="fas fa-history"></i> Key History
                </button>
            </div>
        </div>
        
        <div class="footer">
            <p>© 2023 CeraHub Key System | Secure and reliable</p>
        </div>
    </div>

    <script>
        // Function to generate a random 3-digit number
        function generateRandomNumber() {
            return Math.floor(100 + Math.random() * 900); // Returns number between 100-999
        }
        
        // Function to generate the key
        function generateKey() {
            return "cerahub" + generateRandomNumber();
        }
        
        // Function to update the key display
        function updateKey() {
            const now = new Date();
            const hours = now.getHours();
            const isAM = hours < 12;
            
            // Check if we need to generate a new key (every 12 hours)
            const lastKeyTime = localStorage.getItem('lastKeyTime');
            const lastKey = localStorage.getItem('currentKey');
            
            let key;
            if (lastKeyTime && lastKey) {
                const elapsed = now - new Date(parseInt(lastKeyTime));
                // 12 hours in milliseconds = 12 * 60 * 60 * 1000 = 43200000
                if (elapsed < 43200000) {
                    key = lastKey;
                } else {
                    key = generateKey();
                    localStorage.setItem('currentKey', key);
                    localStorage.setItem('lastKeyTime', now.getTime().toString());
                    
                    // Save to history
                    const history = JSON.parse(localStorage.getItem('keyHistory') || '[]');
                    history.push({
                        key: key,
                        timestamp: now.getTime()
                    });
                    localStorage.setItem('keyHistory', JSON.stringify(history));
                }
            } else {
                key = generateKey();
                localStorage.setItem('currentKey', key);
                localStorage.setItem('lastKeyTime', now.getTime().toString());
            }
            
            document.getElementById('currentKey').textContent = key;
            startCountdown();
        }
        
        // Function to start the countdown timer
        function startCountdown() {
            const lastKeyTime = parseInt(localStorage.getItem('lastKeyTime'));
            const nextUpdateTime = lastKeyTime + 43200000; // 12 hours in milliseconds
            
            function updateTimer() {
                const now = new Date().getTime();
                const distance = nextUpdateTime - now;
                
                if (distance < 0) {
                    updateKey();
                    return;
                }
                
                const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                const seconds = Math.floor((distance % (1000 * 60)) / 1000);
                
                document.getElementById("timer").textContent = 
                    `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            }
            
            updateTimer();
            setInterval(updateTimer, 1000);
        }
        
        // Function to copy the key to clipboard
        function copyKey() {
            const key = document.getElementById('currentKey').textContent;
            navigator.clipboard.writeText(key).then(() => {
                alert('Key copied to clipboard: ' + key);
            }).catch(err => {
                console.error('Failed to copy: ', err);
            });
        }
        
        // Function to show key history
        function showHistory() {
            const history = JSON.parse(localStorage.getItem('keyHistory') || '[]');
            if (history.length === 0) {
                alert('No key history available.');
            } else {
                let historyText = 'Previous Keys:\n\n';
                history.forEach(entry => {
                    const date = new Date(entry.timestamp);
                    historyText += `${entry.key} - ${date.toLocaleString()}\n`;
                });
                alert(historyText);
            }
        }
        
        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            updateKey();
        });
    </script>
</body>
</html>
